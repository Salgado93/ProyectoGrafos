/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Estructura;

import edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath;
import java.awt.Color;
import java.util.Collection;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author danie
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        grafo = new Grafo();
        /*grafo.AddVertice(new Vertice(1, "Vertice1"));
        grafo.AddVertice(new Vertice(2, "Vertice2"));
        grafo.AddVertice(new Vertice(3, "Vertice3"));
        grafo.AddVertice(new Vertice(4, "Vertice4"));
        grafo.AddVertice(new Vertice(5, "Vertice5"));
        grafo.AddVertice(new Vertice(6, "Vertice6"));
        grafo.AddVertice(new Vertice(7, "Vertice7"));
        grafo.AddVertice(new Vertice(8, "Vertice8"));
        grafo.AddVertice(new Vertice(9, "Vertice8"));
        
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(0).getValor(), (Vertice) grafo.getVertices().get(1).getValor(), 10));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(1).getValor(), (Vertice) grafo.getVertices().get(2).getValor(), 6));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(0).getValor(), (Vertice) grafo.getVertices().get(2).getValor(), 3));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(1).getValor(), (Vertice) grafo.getVertices().get(3).getValor(), 0));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(3).getValor(), (Vertice) grafo.getVertices().get(4).getValor(), 2));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(4).getValor(), (Vertice) grafo.getVertices().get(5).getValor(), 100));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(2).getValor(), (Vertice) grafo.getVertices().get(4).getValor(), 4));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(2).getValor(), (Vertice) grafo.getVertices().get(6).getValor(), 7));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(6).getValor(), (Vertice) grafo.getVertices().get(7).getValor(), 5));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(5).getValor(), (Vertice) grafo.getVertices().get(7).getValor(), 20));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(7).getValor(), (Vertice) grafo.getVertices().get(8).getValor(), 36));
        grafo.AddArista(new Arista(Color.BLACK, (Vertice) grafo.getVertices().get(8).getValor(), (Vertice) grafo.getVertices().get(0).getValor(), 37));*/
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_principal = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jl_etiqueta = new javax.swing.JLabel();
        tf_etiqueta = new javax.swing.JTextField();
        jb_agregar = new javax.swing.JButton();
        jb_salirGrafos = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jl_puntoA = new javax.swing.JLabel();
        jl_flecha1 = new javax.swing.JLabel();
        jl_puntoB = new javax.swing.JLabel();
        jl_aristasA = new javax.swing.JLabel();
        jl_aristasB = new javax.swing.JLabel();
        jc_puntoB = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        tf_peso = new javax.swing.JTextField();
        jb_agregarArista = new javax.swing.JButton();
        jc_puntoA = new javax.swing.JComboBox<>();
        jb_actualizarAristas = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cb_POrigen = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cb_PDestino = new javax.swing.JComboBox<>();
        jb_caminosMinimos = new javax.swing.JButton();
        jb_prim = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lb_tiempo = new javax.swing.JLabel();
        jb_visualizarGrafo = new javax.swing.JButton();
        jb_gradoGrado = new javax.swing.JButton();
        jmb_menu = new javax.swing.JMenuBar();
        jm_file = new javax.swing.JMenu();
        jmi_administrarGrafos = new javax.swing.JMenuItem();

        jd_principal.setTitle("Administrar Vertices");

        jl_etiqueta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jl_etiqueta.setText("Etiqueta");

        tf_etiqueta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jb_agregar.setText("AGREGAR");
        jb_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_agregarActionPerformed(evt);
            }
        });

        jb_salirGrafos.setText("SALIR");
        jb_salirGrafos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salirGrafosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jb_agregar)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jl_etiqueta, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_etiqueta, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(279, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jb_salirGrafos, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_etiqueta, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_etiqueta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jb_agregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(jb_salirGrafos)
                .addGap(26, 26, 26))
        );

        jTabbedPane2.addTab("Agregar Vertices", jPanel3);

        jl_puntoA.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jl_puntoA.setText("Punto A");

        jl_flecha1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jl_flecha1.setText("--->");

        jl_puntoB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jl_puntoB.setText("Punto B");

        jl_aristasA.setText("Aristas");

        jl_aristasB.setText("Aristas");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Peso");

        jb_agregarArista.setText("Agregar Arista");
        jb_agregarArista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_agregarAristaActionPerformed(evt);
            }
        });

        jb_actualizarAristas.setText("Actualizar Aristas");
        jb_actualizarAristas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_actualizarAristasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jl_aristasA)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jl_puntoA)
                                        .addGap(86, 86, 86)
                                        .addComponent(jl_flecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jc_puntoA, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(137, 137, 137)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jl_puntoB))
                            .addComponent(jl_aristasB)
                            .addComponent(jc_puntoB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jb_agregarArista, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tf_peso))
                            .addComponent(jb_actualizarAristas))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_puntoA)
                    .addComponent(jl_puntoB)
                    .addComponent(jl_flecha1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_aristasA)
                    .addComponent(jl_aristasB, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jc_puntoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jc_puntoA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_actualizarAristas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_peso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jb_agregarArista)
                .addGap(39, 39, 39))
        );

        jTabbedPane2.addTab("Agregar Aristas", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Agregar Grafo", jPanel1);

        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jp_ComponentShown(evt);
            }
        });

        jLabel4.setText("Punto de origen");

        cb_POrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_POrigenActionPerformed(evt);
            }
        });

        jLabel5.setText("Destino");

        jb_caminosMinimos.setText("Camino Corto");
        jb_caminosMinimos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_caminosMinimosActionPerformed(evt);
            }
        });

        jb_prim.setText("Encontrar Rutas Cortas");
        jb_prim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_primActionPerformed(evt);
            }
        });

        jLabel6.setText("Tiempo");

        lb_tiempo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jb_visualizarGrafo.setText("Visualizar Grafo");
        jb_visualizarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_visualizarGrafoActionPerformed(evt);
            }
        });

        jb_gradoGrado.setText("Grado del Grafo");
        jb_gradoGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_gradoGradoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cb_POrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(203, 203, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cb_PDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jb_visualizarGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jb_gradoGrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lb_tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jb_caminosMinimos)
                            .addComponent(jb_prim))))
                .addGap(78, 78, 78))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cb_PDestino, cb_POrigen});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jb_caminosMinimos, jb_prim, jb_visualizarGrafo});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cb_POrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cb_PDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jb_caminosMinimos)
                    .addComponent(jb_visualizarGrafo))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jb_prim)
                    .addComponent(jb_gradoGrado))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dibujar Grafo", jPanel2);

        javax.swing.GroupLayout jd_principalLayout = new javax.swing.GroupLayout(jd_principal.getContentPane());
        jd_principal.getContentPane().setLayout(jd_principalLayout);
        jd_principalLayout.setHorizontalGroup(
            jd_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jd_principalLayout.setVerticalGroup(
            jd_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_principalLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grafos");

        jm_file.setText("Administrar Grafo");

        jmi_administrarGrafos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jmi_administrarGrafos.setText("Agregar Grafo");
        jmi_administrarGrafos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_administrarGrafosActionPerformed(evt);
            }
        });
        jm_file.add(jmi_administrarGrafos);

        jmb_menu.add(jm_file);

        setJMenuBar(jmb_menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmi_administrarGrafosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_administrarGrafosActionPerformed
        // TODO add your handling code here:
        jd_principal.setModal(true);
        jd_principal.pack();
        jd_principal.setLocationRelativeTo(this);
        jd_principal.setVisible(true);
    }//GEN-LAST:event_jmi_administrarGrafosActionPerformed

    private void jp_ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jp_ComponentShown
        // TODO add your handling code here:
        DefaultComboBoxModel modelo=new DefaultComboBoxModel();
        DefaultComboBoxModel modelo2=new DefaultComboBoxModel();
        for (int i = 0; i < grafo.getVertices().size(); i++) {
            modelo.addElement((Vertice)grafo.getVertices().get(i).getValor());
            modelo2.addElement((Vertice)grafo.getVertices().get(i).getValor());
        }
        this.cb_POrigen.setModel(modelo);
        this.cb_PDestino.setModel(modelo2);
    }//GEN-LAST:event_jp_ComponentShown

    private void jb_caminosMinimosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_caminosMinimosActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < grafo.getAristas().size(); i++) {
            ((Arista)grafo.getAristas().get(i).getValor()).setColor(Color.black);
        }
        Lista camino=Dijkstra((Vertice)this.cb_POrigen.getSelectedItem(),(Vertice)this.cb_PDestino.getSelectedItem(),grafo);
        Arista temporal;
        for (int i = 0; i < camino.size(); i++) {
            for (int j = 0; j < camino.size()-1; j++) {
                if (((Arista)camino.get(j).getValor()).getPeso()<((Arista)camino.get(j+1).getValor()).getPeso()) {
                    temporal=((Arista)camino.get(j).getValor());
                    camino.get(j).setValor(((Arista)camino.get(j+1).getValor()));
                    camino.get(j+1).setValor(temporal);
                }
            }
        }
        int tiempo=0;
        for (int i = 0; i < camino.size(); i++) {
            if (i>2) {
                tiempo+=((Arista)camino.get(i).getValor()).getPeso();
                ((Arista)camino.get(i).getValor()).setColor(Color.BLUE);
            }else{
                ((Arista)camino.get(i).getValor()).setColor(Color.RED);
            }
        }
        
        int con=camino.size()-1;
        for (int i = 0; i < grafo.getAristas().size(); i++) {
            if (con>=0) {
                if (((Arista)camino.get(con).getValor()).getPeso()==((Arista)grafo.getAristas().get(i).getValor()).getPeso()) {
                grafo.getAristas().get(i).setValor((Arista)camino.get(con).getValor());
                con--;
                i=0;
            }
            }
        }
        for (int i = 0; i < grafo.getAristas().size(); i++) {
            System.out.println(((Arista)grafo.getAristas().get(i).getValor()).getColor().toString());
        }
        this.lb_tiempo.setText(tiempo+"");
        Dibujar db = new Dibujar();
        db.dibujarCamino(grafo);
        } catch (Exception e) {
            System.out.println("Error en camino corto..  " + e);
        }
        
    }//GEN-LAST:event_jb_caminosMinimosActionPerformed

    private void cb_POrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_POrigenActionPerformed
        // TODO add your handling code here:
        DefaultComboBoxModel modelo=new DefaultComboBoxModel();
        for (int i = 0; i < grafo.getVertices().size(); i++) {
            if ((Vertice)grafo.getVertices().get(i).getValor()!=(Vertice)this.cb_POrigen.getSelectedItem()) {
                modelo.addElement((Vertice)grafo.getVertices().get(i).getValor());
            }
        }
        this.cb_PDestino.setModel(modelo);
    }//GEN-LAST:event_cb_POrigenActionPerformed

    private void jb_agregarAristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_agregarAristaActionPerformed
        // TODO add your handling code here:
        try {
            Vertice puntoA = (Vertice)jc_puntoA.getSelectedItem();
            Vertice puntoB = (Vertice) jc_puntoB.getSelectedItem();
            int peso = Integer.parseInt(tf_peso.getText());
            Arista arista = new Arista(Color.BLACK,puntoA,puntoB,peso);
            grafo.AddArista(arista);
            System.out.println("Arista Agregada: " +arista);
            tf_peso.setText("");
            JOptionPane.showMessageDialog(null, "Arista Agregada");
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jb_agregarAristaActionPerformed

    private void jb_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_agregarActionPerformed
        // TODO add your handling code here:
        try {
            int id = grafo.getVertices().size()+1;
            Vertice vertice = new Vertice(id,tf_etiqueta.getText());
            grafo.AddVertice(vertice);
            System.out.println(id);
            tf_etiqueta.setText("");
            JOptionPane.showMessageDialog(null, "Vertice Agregado!");
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jb_agregarActionPerformed

    private void jb_salirGrafosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salirGrafosActionPerformed
        // TODO add your handling code here:
        jd_principal.setVisible(false);
    }//GEN-LAST:event_jb_salirGrafosActionPerformed

    private void jb_primActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_primActionPerformed
        // TODO add your handling code here:
        int[][] adyacencias = MatrizPrim((Vertice)grafo.getVertices().get(0).getValor(), grafo);
        Grafo mst = grafo.algoritmoPrim(adyacencias,grafo, (Vertice) cb_POrigen.getSelectedItem());
        Dibujar db = new Dibujar();
        db.dibujarGrafo(mst);
    }//GEN-LAST:event_jb_primActionPerformed

    private void jb_actualizarAristasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_actualizarAristasActionPerformed
        // TODO add your handling code here:
        jc_puntoA.removeAllItems();
        jc_puntoA.removeAllItems();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        DefaultComboBoxModel model2 = new DefaultComboBoxModel();
        for (int i = 0; i < grafo.getVertices().size(); i++) {
                model.addElement((Vertice)grafo.getVertices().get(i).getValor());
                model2.addElement((Vertice)grafo.getVertices().get(i).getValor());
        }
        jc_puntoA.setModel(model);
        jc_puntoB.setModel(model2);
    }//GEN-LAST:event_jb_actualizarAristasActionPerformed

    private void jb_visualizarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_visualizarGrafoActionPerformed
        // TODO add your handling code here:
        try {
            Dibujar db = new Dibujar();
            db.dibujarGrafo(grafo);
            System.out.println("D: ");
            DijkstraShortestPath d = null;
            Number distance = d.getDistance(cb_POrigen.getSelectedItem(), cb_PDestino.getSelectedItem());
            System.out.println("d = " + distance);
        } catch (Exception e) {
            System.out.println("Error en dibujar grafo. " + e);
        }
    }//GEN-LAST:event_jb_visualizarGrafoActionPerformed

    private void jb_gradoGradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_gradoGradoActionPerformed
        // TODO add your handling code here:
        System.out.println("No implementado.  ");
    }//GEN-LAST:event_jb_gradoGradoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    static Lista Dijkstra(Vertice origen,Vertice destino, Grafo grafo) {
        Lista camino=new Lista();
        int[][] matriz = new int[grafo.getAristas().size()][grafo.getVertices().size()];
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[0].length; j++) {
                matriz[i][j] = Integer.MAX_VALUE;
            }
        }
        Pila adyacentes = new Pila();
        Cola adyacentes3 = new Cola();
        Vertice actual = origen;
        int i = 0;
        do {
            System.out.println(actual);
            adyacentes = Adyacentes(actual, grafo, adyacentes);
            while (!adyacentes.IsEmpty()) {
                Vertice temporal = (Vertice) adyacentes.Desapilar();
                adyacentes3.queue(temporal);
                int peso = Peso(actual, temporal, grafo, origen);
                if (i > 0) {
                    if (peso < matriz[i - 1][temporal.getId() - 1]) {
                        matriz[i][temporal.getId() - 1] = Peso(actual, temporal, grafo, origen);
                        if (temporal.getId() == destino.getId()) {//----------------->aqui
                            camino = Camino(actual, temporal, grafo, origen);
                        }
                    } else {
                        matriz[i][temporal.getId() - 1] = matriz[i - 1][temporal.getId() - 1];
                    }
                } else {
                    matriz[i][temporal.getId() - 1] = Peso(actual, temporal, grafo, origen);
                    if (temporal.getId() == destino.getId()) {//----------------->aqui
                        camino = Camino(actual, temporal, grafo, origen);
                    }
                }

            }
            if (!adyacentes3.isEmpty()) {
                actual = (Vertice) adyacentes3.Dequeue();
            }
            i++;
            if (i == grafo.getAristas().size()) {
                break;
            }
        } while (!adyacentes3.isEmpty());

        for (int j = 0; j < matriz.length; j++) {
            for (int k = 0; k < matriz[0].length; k++) {
                if (k > 0) {
                    if (matriz[k - 1][k] < matriz[k][k]) {
                        matriz[k][k] = matriz[k - 1][k];
                    }
                }
                System.out.print("[" + matriz[k][k] + "]");
            }
            System.out.println("");
        }
         for (int j = 0; j < camino.size(); j++) {
             System.out.println(camino);
        }
 
        return camino;
    }
    static int Peso(Vertice puntoA, Vertice puntoB, Grafo grafo, Vertice origen) {
        int peso = 0, peso2 = 0;
        for (int i = 0; i < grafo.getAristas().size(); i++) {
            if (((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == puntoA
                    && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoB() == puntoB && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == origen) {
                peso = ((Arista) grafo.getAristas().get(i).getValor()).getPeso();
            } else if ((((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == puntoA
                    && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoB() == puntoB)) {
                Vertice anterior = origen;
                boolean noEncontrado = true;
                Pila adyacentes = new Pila();
                Cola adyacentes3 = new Cola();
                do {
                    adyacentes = Adyacentes(anterior, grafo, adyacentes);
                    while (!adyacentes.IsEmpty()) {
                        Vertice temporal = (Vertice) adyacentes.Desapilar();
                        adyacentes3.queue(temporal);
                        if (temporal.getId() == puntoA.getId()) {
                            noEncontrado = false;
                            break;
                        }
                    }
                    if (noEncontrado) {
                        if (!adyacentes3.isEmpty()) {
                            anterior = (Vertice) adyacentes3.Dequeue();
                        } else {
                            noEncontrado = false;
                        }
                    }
                } while (noEncontrado);
                for (int j = 0; j < grafo.getAristas().size(); j++) {
                    if (((Arista) grafo.getAristas().get(j).getValor()).getPuntoA() == anterior && ((Arista) grafo.getAristas().get(j).getValor()).getPuntoB() == puntoA) {
                        peso2 += ((Arista) grafo.getAristas().get(j).getValor()).getPeso();
                    }
                }
                Vertice temPuntoA = origen;
                if (anterior.getId() != origen.getId()) {
                    do {
                        noEncontrado = true;
                        adyacentes = new Pila();
                        adyacentes3 = new Cola();

                        do {
                            adyacentes = Adyacentes(temPuntoA, grafo, adyacentes);
                            while (!adyacentes.IsEmpty()) {
                                Vertice temporal = (Vertice) adyacentes.Desapilar();
                                adyacentes3.queue(temporal);
                                if (temporal.getId() == anterior.getId()) {
                                    noEncontrado = false;
                                    break;
                                }
                            }
                            if (noEncontrado) {
                                if (!adyacentes3.isEmpty()) {
                                    temPuntoA = (Vertice) adyacentes3.Dequeue();
                                } else {
                                    noEncontrado = false;
                                }
                            }
                        } while (noEncontrado);
                        for (int j = 0; j < grafo.getAristas().size(); j++) {
                            if (((Arista) grafo.getAristas().get(j).getValor()).getPuntoA() == temPuntoA && ((Arista) grafo.getAristas().get(j).getValor()).getPuntoB() == anterior) {
                                peso2 += ((Arista) grafo.getAristas().get(j).getValor()).getPeso();
                            }
                        }
                        anterior = temPuntoA;
                    } while (temPuntoA.getId() != origen.getId());
                }
                peso = ((Arista) grafo.getAristas().get(i).getValor()).getPeso() + peso2;
            }
        }
        return peso;
    }
    static Lista Camino(Vertice puntoA, Vertice puntoB, Grafo grafo, Vertice origen) {
        Lista aristas=new Lista();
        for (int i = 0; i < grafo.getAristas().size(); i++) {
            if (((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == puntoA
                    && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoB() == puntoB && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == origen) {
                aristas.insert(new Nodo(null,(Arista)grafo.getAristas().get(i).getValor()));
            } else if ((((Arista) grafo.getAristas().get(i).getValor()).getPuntoA() == puntoA
                    && ((Arista) grafo.getAristas().get(i).getValor()).getPuntoB() == puntoB)) {
                Vertice anterior = origen;
                boolean noEncontrado = true;
                Pila adyacentes = new Pila();
                Cola adyacentes3 = new Cola();
                do {
                    adyacentes = Adyacentes(anterior, grafo, adyacentes);
                    while (!adyacentes.IsEmpty()) {
                        Vertice temporal = (Vertice) adyacentes.Desapilar();
                        adyacentes3.queue(temporal);
                        if (temporal.getId() == puntoA.getId()) {
                            noEncontrado = false;
                            break;
                        }
                    }
                    if (noEncontrado) {
                        if (!adyacentes3.isEmpty()) {
                            anterior = (Vertice) adyacentes3.Dequeue();
                        } else {
                            noEncontrado = false;
                        }
                    }
                } while (noEncontrado);
                for (int j = 0; j < grafo.getAristas().size(); j++) {
                    if (((Arista) grafo.getAristas().get(j).getValor()).getPuntoA() == anterior && ((Arista) grafo.getAristas().get(j).getValor()).getPuntoB() == puntoA) {
                        aristas.insert(new Nodo(null,(Arista)grafo.getAristas().get(j).getValor()));
                    }
                }
                Vertice temPuntoA = origen;
                if (anterior.getId() != origen.getId()) {
                    do {
                        noEncontrado = true;
                        adyacentes = new Pila();
                        adyacentes3 = new Cola();

                        do {
                            adyacentes = Adyacentes(temPuntoA, grafo, adyacentes);
                            while (!adyacentes.IsEmpty()) {
                                Vertice temporal = (Vertice) adyacentes.Desapilar();
                                adyacentes3.queue(temporal);
                                if (temporal.getId() == anterior.getId()) {
                                    noEncontrado = false;
                                    break;
                                }
                            }
                            if (noEncontrado) {
                                if (!adyacentes3.isEmpty()) {
                                    temPuntoA = (Vertice) adyacentes3.Dequeue();
                                } else {
                                    noEncontrado = false;
                                }
                            }
                        } while (noEncontrado);
                        for (int j = 0; j < grafo.getAristas().size(); j++) {
                            if (((Arista) grafo.getAristas().get(j).getValor()).getPuntoA() == temPuntoA && ((Arista) grafo.getAristas().get(j).getValor()).getPuntoB() == anterior) {
                                aristas.insert(new Nodo(null,(Arista)grafo.getAristas().get(j).getValor()));
                            }
                        }
                        anterior = temPuntoA;
                    } while (temPuntoA.getId() != origen.getId());
                }
                aristas.insert(new Nodo(null,(Arista)grafo.getAristas().get(i).getValor()));
            }
        }
        return aristas;
    }
    static Pila Adyacentes(Vertice actual, Grafo grafo, Pila adyacentes) {
        for (int i = 0; i < grafo.getAristas().size(); i++) {
            if (((Arista) grafo.getAristas().get(i).getValor()).getPuntoA().getId() == actual.getId()) {
                adyacentes.Apilar((Vertice) ((Arista) grafo.getAristas().get(i).getValor()).getPuntoB());
            }
            /* if (i == actual.getNumAristas()) {
                break;
            }*/
        }
        adyacentes.ordenar();
        return adyacentes;
    }
    static int[][] MatrizPrim(Vertice origen, Grafo grafo) {
        int[][] matriz = new int[grafo.getVertices().size()][grafo.getVertices().size()];
        Pila vertices = new Pila();
        for (int i = 0; i < grafo.getVertices().size(); i++) {
            vertices.Apilar(((Vertice)grafo.getVertices().get(i).getValor()));
        }
        vertices.ordenar();
        Vertice actual;
        for (int i = 0; i < matriz.length; i++) {
            actual=(Vertice)vertices.Desapilar();
            for (int j = 0; j < grafo.getAristas().size(); j++) {
                if (((Arista)grafo.getAristas().get(j).getValor()).getPuntoA().getId()==actual.getId()) {
                    matriz[i][((Arista)grafo.getAristas().get(j).getValor()).getPuntoB().getId()-1]=((Arista)grafo.getAristas().get(j).getValor()).getPeso();
                }
                if (((Arista)grafo.getAristas().get(j).getValor()).getPuntoB().getId()==actual.getId()) {
                    matriz[i][((Arista)grafo.getAristas().get(j).getValor()).getPuntoA().getId()-1]=((Arista)grafo.getAristas().get(j).getValor()).getPeso();
                }
            }
            
        }
        return matriz;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb_PDestino;
    private javax.swing.JComboBox<String> cb_POrigen;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton jb_actualizarAristas;
    private javax.swing.JButton jb_agregar;
    private javax.swing.JButton jb_agregarArista;
    private javax.swing.JButton jb_caminosMinimos;
    private javax.swing.JButton jb_gradoGrado;
    private javax.swing.JButton jb_prim;
    private javax.swing.JButton jb_salirGrafos;
    private javax.swing.JButton jb_visualizarGrafo;
    private javax.swing.JComboBox<String> jc_puntoA;
    private javax.swing.JComboBox<String> jc_puntoB;
    private javax.swing.JDialog jd_principal;
    private javax.swing.JLabel jl_aristasA;
    private javax.swing.JLabel jl_aristasB;
    private javax.swing.JLabel jl_etiqueta;
    private javax.swing.JLabel jl_flecha1;
    private javax.swing.JLabel jl_puntoA;
    private javax.swing.JLabel jl_puntoB;
    private javax.swing.JMenu jm_file;
    private javax.swing.JMenuBar jmb_menu;
    private javax.swing.JMenuItem jmi_administrarGrafos;
    private javax.swing.JLabel lb_tiempo;
    private javax.swing.JTextField tf_etiqueta;
    private javax.swing.JTextField tf_peso;
    // End of variables declaration//GEN-END:variables
    Grafo grafo;
}


